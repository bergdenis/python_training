{"uid":"f95bfc96e79fbd8c","name":"test_add_group[None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3]","fullName":"test.test_add_group#test_add_group","historyId":"ed46576aa7d92609e1ac4778ccc824bc","time":{"start":1691584298648,"stop":1691584299733,"duration":1085},"status":"failed","statusMessage":"AssertionError: assert [388:name4:he...r_XYf =-, ...] == [388:name4:he...r_XYf =-, ...]\n  Left contains one more item: None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3\n  Use -v to get more diff","statusTrace":"app = <fixture.application.Application object at 0x00000238C0A3E820>, db = <fixture.db.DbFixture object at 0x00000238C0A2ADF0>, json_groups = None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3\n\n    def test_add_group(app, db, json_groups):\n        group = json_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step('When I add a group %s to the list' % group):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old group list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           AssertionError: assert [388:name4:he...r_XYf =-, ...] == [388:name4:he...r_XYf =-, ...]\nE             Left contains one more item: None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3\nE             Use -v to get more diff\n\ntest\\test_add_group.py:15: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"db","time":{"start":1691584287833,"stop":1691584287859,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"stop","time":{"start":1691584287833,"stop":1691584287833,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"app","time":{"start":1691584298612,"stop":1691584298646,"duration":34},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert [388:name4:he...r_XYf =-, ...] == [388:name4:he...r_XYf =-, ...]\n  Left contains one more item: None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3\n  Use -v to get more diff","statusTrace":"app = <fixture.application.Application object at 0x00000238C0A3E820>, db = <fixture.db.DbFixture object at 0x00000238C0A2ADF0>, json_groups = None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3\n\n    def test_add_group(app, db, json_groups):\n        group = json_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step('When I add a group %s to the list' % group):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old group list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           AssertionError: assert [388:name4:he...r_XYf =-, ...] == [388:name4:he...r_XYf =-, ...]\nE             Left contains one more item: None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3\nE             Use -v to get more diff\n\ntest\\test_add_group.py:15: AssertionError","steps":[{"name":"Given a group list","time":{"start":1691584298648,"stop":1691584298649,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"When I add a group None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3 to the list","time":{"start":1691584298649,"stop":1691584299733,"duration":1084},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"Then the new group list is equal to the old group list with the added group","time":{"start":1691584299733,"stop":1691584299733,"duration":0},"status":"failed","statusMessage":"AssertionError: assert [388:name4:he...r_XYf =-, ...] == [388:name4:he...r_XYf =-, ...]\n  Left contains one more item: None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3\n  Use -v to get more diff\n","statusTrace":"  File \"C:\\Users\\denis.berg\\PycharmProjects\\python_training\\test\\test_add_group.py\", line 15, in test_add_group\n    assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":3,"hasContent":true},"afterStages":[{"name":"db::fin","time":{"start":1691584302252,"stop":1691584302252,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"stop::fin","time":{"start":1691584302254,"stop":1691584304322,"duration":2068},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_add_group"},{"name":"host","value":"bergd-nb"},{"name":"thread","value":"8816-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_add_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"json_groups","value":"None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f95bfc96e79fbd8c.json","parameterValues":["None:name~E OGY:header:{Zr Sv U|YQ_M:footer;^ bWNj'@L3"]}